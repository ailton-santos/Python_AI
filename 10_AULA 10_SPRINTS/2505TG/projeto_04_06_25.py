{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMtb0uG1fdRcQwWZj2zrFlR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":[],"metadata":{"id":"8nerMYtRNo7W"}},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G2vA_cX3_Lsw","executionInfo":{"status":"ok","timestamp":1749072211875,"user_tz":180,"elapsed":2268,"user":{"displayName":"Daniel Moura","userId":"07611990959631410270"}},"outputId":"c0f9b123-6945-4031-cf1d-e27317fa0d4e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Primeiras linhas do DataFrame:\n","   idade  tempo_servico_meses  uso_dados_GB  reclamações  pagamento_atrasado  \\\n","0     56                   35     49.078123            3                   0   \n","1     69                   51     31.958863            0                   1   \n","2     46                   15     13.730375            3                   1   \n","3     32                   25     32.066279            3                   1   \n","4     60                   55     27.459284            0                   0   \n","\n","   churn  \n","0      1  \n","1      0  \n","2      0  \n","3      1  \n","4      0  \n","\n","Distribuição da variável churn:\n","churn\n","1    515\n","0    485\n","Name: count, dtype: int64\n","churn\n","1    0.515\n","0    0.485\n","Name: proportion, dtype: float64\n","\n","Tamanho do conjunto de treino: 750\n","Tamanho do conjunto de teste: 250\n","Proporção de churn no treino:\n","churn\n","1    0.514667\n","0    0.485333\n","Name: proportion, dtype: float64\n","Proporção de churn no teste:\n","churn\n","1    0.516\n","0    0.484\n","Name: proportion, dtype: float64\n","\n","Avaliação do Modelo de Regressão Logística:\n","\n","Matriz de Confusão:\n","[[51 70]\n"," [52 77]]\n","\n","Relatório de Classificação:\n","              precision    recall  f1-score   support\n","\n","           0       0.50      0.42      0.46       121\n","           1       0.52      0.60      0.56       129\n","\n","    accuracy                           0.51       250\n","   macro avg       0.51      0.51      0.51       250\n","weighted avg       0.51      0.51      0.51       250\n","\n","\n","Acurácia:\n","0.512\n","\n","Número de clientes no conjunto de teste com probabilidade de churn >= 0.5: 147\n","\n","Informações dos 10 primeiros clientes com maior probabilidade de churn no conjunto de teste:\n","     idade  tempo_servico_meses  uso_dados_GB  reclamações  \\\n","37      68                   42     14.407707            0   \n","724     58                   59     36.920494            0   \n","937     67                   32     14.568320            0   \n","517     66                   34     30.706394            0   \n","67      57                   55     48.441478            0   \n","870     65                   49     28.499917            2   \n","750     64                   55      1.157695            1   \n","406     64                   49     32.456604            0   \n","717     62                   53     36.596624            0   \n","986     62                   31     18.049129            0   \n","\n","     pagamento_atrasado  churn_real  prob_churn_prevista  \n","37                    0           0             0.598020  \n","724                   0           1             0.591032  \n","937                   0           1             0.587259  \n","517                   0           0             0.584903  \n","67                    0           1             0.583988  \n","870                   0           0             0.579217  \n","750                   1           0             0.579169  \n","406                   1           1             0.578208  \n","717                   1           0             0.577380  \n","986                   0           1             0.576342  \n"]}],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n","\n","# Gere dados fictícios para simular o problema de churn\n","# Este é um exemplo simples e pode ser expandido com mais features reais\n","np.random.seed(42)\n","\n","n_clientes = 1000\n","\n","data = {\n","    'idade': np.random.randint(18, 70, n_clientes),\n","    'tempo_servico_meses': np.random.randint(1, 60, n_clientes),\n","    'uso_dados_GB': np.random.uniform(1, 50, n_clientes),\n","    'reclamações': np.random.randint(0, 5, n_clientes),\n","    'pagamento_atrasado': np.random.randint(0, 2, n_clientes), # 1 se atrasou, 0 se não\n","    'churn': np.random.randint(0, 2, n_clientes) # 1 se deu churn, 0 se não\n","}\n","df = pd.DataFrame(data)\n","\n","# Exibir as primeiras linhas do DataFrame\n","print(\"Primeiras linhas do DataFrame:\")\n","print(df.head())\n","\n","# Verificar a distribuição da variável target (churn)\n","print(\"\\nDistribuição da variável churn:\")\n","print(df['churn'].value_counts())\n","print(df['churn'].value_counts(normalize=True))\n","\n","# Separar features (X) e target (y)\n","X = df.drop('churn', axis=1)\n","y = df['churn']\n","\n","# Dividir os dados em conjuntos de treino e teste\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y)\n","\n","print(f\"\\nTamanho do conjunto de treino: {X_train.shape[0]}\")\n","print(f\"Tamanho do conjunto de teste: {X_test.shape[0]}\")\n","print(f\"Proporção de churn no treino:\\n{y_train.value_counts(normalize=True)}\")\n","print(f\"Proporção de churn no teste:\\n{y_test.value_counts(normalize=True)}\")\n","\n","# Escalar as features numéricas\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","# Treinar um modelo de Regressão Logística\n","model = LogisticRegression(random_state=42)\n","model.fit(X_train_scaled, y_train)\n","\n","# Fazer previsões no conjunto de teste\n","y_pred = model.predict(X_test_scaled)\n","y_pred_proba = model.predict_proba(X_test_scaled)[:, 1] # Probabilidades de churn\n","\n","# Avaliar o modelo\n","print(\"\\nAvaliação do Modelo de Regressão Logística:\")\n","print(\"\\nMatriz de Confusão:\")\n","print(confusion_matrix(y_test, y_pred))\n","\n","print(\"\\nRelatório de Classificação:\")\n","print(classification_report(y_test, y_pred))\n","\n","print(\"\\nAcurácia:\")\n","print(accuracy_score(y_test, y_pred))\n","\n","# Identificar clientes com alta probabilidade de churn no conjunto de teste\n","# Define um threshold de probabilidade (pode ser ajustado)\n","threshold = 0.5\n","\n","# Adicionar as probabilidades previstas de volta ao DataFrame de teste (usando índices originais)\n","X_test_df = X_test.copy()\n","X_test_df['churn_real'] = y_test\n","X_test_df['prob_churn_prevista'] = y_pred_proba\n","\n","# Clientes com probabilidade de churn acima do threshold\n","clientes_alto_risco = X_test_df[X_test_df['prob_churn_prevista'] >= threshold]\n","\n","print(f\"\\nNúmero de clientes no conjunto de teste com probabilidade de churn >= {threshold}: {clientes_alto_risco.shape[0]}\")\n","\n","print(\"\\nInformações dos 10 primeiros clientes com maior probabilidade de churn no conjunto de teste:\")\n","print(clientes_alto_risco.sort_values(by='prob_churn_prevista', ascending=False).head(10))\n","\n","# Nota: Em um cenário real, você usaria os dados completos dos clientes (não apenas o conjunto de teste)\n","# para prever a probabilidade de churn para todos eles.\n","# Exemplo para prever em todos os dados (depois de treinar o modelo):\n","# X_scaled_full = scaler.transform(X)\n","# df['prob_churn_prevista_full'] = model.predict_proba(X_scaled_full)[:, 1]\n","# clientes_alto_risco_full = df[df['prob_churn_prevista_full'] >= threshold]\n","# print(\"\\nClientes com alto risco de churn (previsto para todos os dados):\")\n","# print(clientes_alto_risco_full.sort_values(by='prob_churn_prevista_full', ascending=False).head())\n"]},{"cell_type":"code","source":["# prompt: Uma empresa de telecomunicações está enfrentando uma alta taxa de evasão de clientes (churn). O churn ocorre quando um cliente cancela seu serviço ou muda para um concorrente. A empresa deseja identificar quais clientes têm maior probabilidade de \"dar churn\" para que possa intervir proativamente e tentar retê-los, talvez oferecendo promoções ou suporte personalizado.\n","# Para isso, eles coletaram dados de 1.000 clientes nos últimos meses, incluindo informações sobre o uso do serviço e histórico de pagamento.\n","\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n","\n","# Gere dados fictícios para simular o problema de churn\n","# Este é um exemplo simples e pode ser expandido com mais features reais\n","np.random.seed(42)\n","\n","n_clientes = 1000\n","\n","data = {\n","    'idade': np.random.randint(18, 70, n_clientes),\n","    'tempo_servico_meses': np.random.randint(1, 60, n_clientes),\n","    'uso_dados_GB': np.random.uniform(1, 50, n_clientes),\n","    'reclamações': np.random.randint(0, 5, n_clientes),\n","    'pagamento_atrasado': np.random.randint(0, 2, n_clientes), # 1 se atrasou, 0 se não\n","    'churn': np.random.randint(0, 2, n_clientes) # 1 se deu churn, 0 se não\n","}\n","\n","df = pd.DataFrame(data)\n","\n","# Exibir as primeiras linhas do DataFrame\n","print(\"Primeiras linhas do DataFrame:\")\n","print(df.head())\n","\n","# Verificar a distribuição da variável target (churn)\n","print(\"\\nDistribuição da variável churn:\")\n","print(df['churn'].value_counts())\n","print(df['churn'].value_counts(normalize=True))\n","\n","# Separar features (X) e target (y)\n","X = df.drop('churn', axis=1)\n","y = df['churn']\n","\n","# Dividir os dados em conjuntos de treino e teste\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y)\n","\n","print(f\"\\nTamanho do conjunto de treino: {X_train.shape[0]}\")\n","print(f\"Tamanho do conjunto de teste: {X_test.shape[0]}\")\n","print(f\"Proporção de churn no treino:\\n{y_train.value_counts(normalize=True)}\")\n","print(f\"Proporção de churn no teste:\\n{y_test.value_counts(normalize=True)}\")\n","\n","# Escalar as features numéricas\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","# Treinar um modelo de Regressão Logística\n","model = LogisticRegression(random_state=42)\n","model.fit(X_train_scaled, y_train)\n","\n","# Fazer previsões no conjunto de teste\n","y_pred = model.predict(X_test_scaled)\n","y_pred_proba = model.predict_proba(X_test_scaled)[:, 1] # Probabilidades de churn\n","\n","# Avaliar o modelo\n","print(\"\\nAvaliação do Modelo de Regressão Logística:\")\n","print(\"\\nMatriz de Confusão:\")\n","print(confusion_matrix(y_test, y_pred))\n","\n","print(\"\\nRelatório de Classificação:\")\n","print(classification_report(y_test, y_pred))\n","\n","print(\"\\nAcurácia:\")\n","print(accuracy_score(y_test, y_pred))\n","\n","# Identificar clientes com alta probabilidade de churn no conjunto de teste\n","# Define um threshold de probabilidade (pode ser ajustado)\n","threshold = 0.5\n","\n","# Adicionar as probabilidades previstas de volta ao DataFrame de teste (usando índices originais)\n","X_test_df = X_test.copy()\n","X_test_df['churn_real'] = y_test\n","X_test_df['prob_churn_prevista'] = y_pred_proba\n","\n","# Clientes com probabilidade de churn acima do threshold\n","clientes_alto_risco = X_test_df[X_test_df['prob_churn_prevista'] >= threshold]\n","\n","print(f\"\\nNúmero de clientes no conjunto de teste com probabilidade de churn >= {threshold}: {clientes_alto_risco.shape[0]}\")\n","\n","print(\"\\nInformações dos 10 primeiros clientes com maior probabilidade de churn no conjunto de teste:\")\n","print(clientes_alto_risco.sort_values(by='prob_churn_prevista', ascending=False).head(10))\n","\n","# Nota: Em um cenário real, você usaria os dados completos dos clientes (não apenas o conjunto de teste)\n","# para prever a probabilidade de churn para todos eles.\n","# Exemplo para prever em todos os dados (depois de treinar o modelo):\n","# X_scaled_full = scaler.transform(X)\n","# df['prob_churn_prevista_full'] = model.predict_proba(X_scaled_full)[:, 1]\n","# clientes_alto_risco_full = df[df['prob_churn_prevista_full'] >= threshold]\n","# print(\"\\nClientes com alto risco de churn (previsto para todos os dados):\")\n","# print(clientes_alto_risco_full.sort_values(by='prob_churn_prevista_full', ascending=False).head())\n"],"metadata":{"id":"4xJMNM9X0LFy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_scaled_full = scaler.transform(X)\n","\n","df['prob_churn_prevista_full'] = model.predict_proba(X_scaled_full)[:, 1]\n","\n","threshold_full = 0.5\n","\n","clientes_alto_risco_full = df[df['prob_churn_prevista_full'] >= threshold_full]\n","\n","print(f\"\\nNúmero de clientes em todos os dados com probabilidade de churn >= {threshold_full}: {clientes_alto_risco_full.shape[0]}\")\n","\n","print(\"\\nInformações dos 10 primeiros clientes com maior probabilidade de churn em todos os dados:\")\n","print(clientes_alto_risco_full.sort_values(by='prob_churn_prevista_full', ascending=False).head(10))\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zCZfPjAn1Tis","executionInfo":{"status":"ok","timestamp":1749072335887,"user_tz":180,"elapsed":33,"user":{"displayName":"Daniel Moura","userId":"07611990959631410270"}},"outputId":"4d117719-b606-494b-e931-cee6b51b3305"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Número de clientes em todos os dados com probabilidade de churn >= 0.5: 640\n","\n","Informações dos 10 primeiros clientes com maior probabilidade de churn em todos os dados:\n","     idade  tempo_servico_meses  uso_dados_GB  reclamações  \\\n","975     69                   57     23.503995            0   \n","775     67                   55     22.569751            0   \n","591     68                   45      5.806046            0   \n","37      68                   42     14.407707            0   \n","670     60                   59     22.171767            0   \n","809     64                   56     10.118969            1   \n","39      69                   37     21.882884            0   \n","509     68                   55     17.958887            0   \n","4       60                   55     27.459284            0   \n","919     68                   38     39.004981            0   \n","\n","     pagamento_atrasado  churn  prob_churn_prevista_full  \n","975                   0      1                  0.611789  \n","775                   0      1                  0.606436  \n","591                   0      1                  0.601834  \n","37                    0      0                  0.598020  \n","670                   0      1                  0.596842  \n","809                   0      1                  0.594767  \n","39                    0      1                  0.594473  \n","509                   1      0                  0.593160  \n","4                     0      0                  0.592584  \n","919                   0      1                  0.591109  \n"]}]},{"cell_type":"code","source":["import pandas as pd\n","print(\"\\nAnálise de Padrões em Clientes com Churn:\")\n","\n","churn_df = df[df['churn'] == 1]\n","\n","if not churn_df.empty:\n","    print(\"\\nCaracterísticas médias dos clientes que deram Churn:\")\n","    print(churn_df.describe())\n","\n","    print(\"\\nDistribuição de 'tempo_servico_meses' para clientes com Churn:\")\n","    print(churn_df['tempo_servico_meses'].value_counts(bins=10).sort_index())\n","    print(\"\\nMédia de 'uso_dados_GB' para clientes com Churn:\")\n","    print(churn_df['uso_dados_GB'].mean())\n","\n","    print(\"\\nContagem de 'reclamações' para clientes com Churn:\")\n","    print(churn_df['reclamações'].value_counts())\n","    print(\"\\nProporção de 'pagamento_atrasado' para clientes com Churn:\")\n","    print(churn_df['pagamento_atrasado'].value_counts(normalize=True))\n","else:\n","    print(\"\\nNão há clientes com churn nos dados para análise de padrões.\")\n","\n","print(\"\\nImportância das Variáveis (Coeficientes da Regressão Logística):\")\n","\n","\n","feature_importance = pd.DataFrame({\n","    'Feature': X.columns,\n","    'Coeficiente': model.coef_[0]\n","})\n","feature_importance['Abs_Coeficiente'] = abs(feature_importance['Coeficiente'])\n","feature_importance_sorted = feature_importance.sort_values(by='Abs_Coeficiente', ascending=False)\n","\n","print(feature_importance_sorted)\n","\n","print(\"\\nInterpretação dos Coeficientes:\")\n","print(\"- Um coeficiente positivo significa que aumentar o valor dessa feature está associado a uma maior probabilidade de churn.\")\n","print(\"- Um coeficiente negativo significa que aumentar o valor dessa feature está associado a uma menor probabilidade de churn.\")\n","print(\"- A magnitude do coeficiente (ignorando o sinal) indica o quão forte é essa associação.\")\n","print(\"\\nNota: Esta análise é baseada nos coeficientes de um modelo de Regressão Logística treinado. Outros modelos podem fornecer diferentes medidas de importância de feature.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ESbSZMuI1gDI","executionInfo":{"status":"ok","timestamp":1749072481199,"user_tz":180,"elapsed":33,"user":{"displayName":"Daniel Moura","userId":"07611990959631410270"}},"outputId":"e4718718-2809-4edc-9828-04209aa4b424"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Análise de Padrões em Clientes com Churn:\n","\n","Características médias dos clientes que deram Churn:\n","            idade  tempo_servico_meses  uso_dados_GB  reclamações  \\\n","count  515.000000           515.000000    515.000000   515.000000   \n","mean    44.594175            30.930097     25.615331     1.996117   \n","std     15.090917            17.037238     14.131425     1.394815   \n","min     18.000000             1.000000      1.242059     0.000000   \n","25%     32.000000            16.000000     13.262565     1.000000   \n","50%     45.000000            33.000000     26.098874     2.000000   \n","75%     57.000000            45.000000     37.712715     3.000000   \n","max     69.000000            59.000000     49.971273     4.000000   \n","\n","       pagamento_atrasado  churn  prob_churn_prevista_full  \n","count          515.000000  515.0                515.000000  \n","mean             0.479612    1.0                  0.515788  \n","std              0.500070    0.0                  0.036645  \n","min              0.000000    1.0                  0.417894  \n","25%              0.000000    1.0                  0.491446  \n","50%              0.000000    1.0                  0.515313  \n","75%              1.000000    1.0                  0.543417  \n","max              1.000000    1.0                  0.611789  \n","\n","Distribuição de 'tempo_servico_meses' para clientes com Churn:\n","(0.941, 6.8]    56\n","(6.8, 12.6]     48\n","(12.6, 18.4]    41\n","(18.4, 24.2]    44\n","(24.2, 30.0]    53\n","(30.0, 35.8]    48\n","(35.8, 41.6]    62\n","(41.6, 47.4]    55\n","(47.4, 53.2]    50\n","(53.2, 59.0]    58\n","Name: count, dtype: int64\n","\n","Média de 'uso_dados_GB' para clientes com Churn:\n","25.61533105974498\n","\n","Contagem de 'reclamações' para clientes com Churn:\n","reclamações\n","2    121\n","0    105\n","3    103\n","4     97\n","1     89\n","Name: count, dtype: int64\n","\n","Proporção de 'pagamento_atrasado' para clientes com Churn:\n","pagamento_atrasado\n","0    0.520388\n","1    0.479612\n","Name: proportion, dtype: float64\n","\n","Importância das Variáveis (Coeficientes da Regressão Logística):\n","               Feature  Coeficiente  Abs_Coeficiente\n","0                idade     0.117392         0.117392\n","1  tempo_servico_meses     0.062610         0.062610\n","3          reclamações    -0.051305         0.051305\n","4   pagamento_atrasado    -0.032862         0.032862\n","2         uso_dados_GB    -0.008048         0.008048\n","\n","Interpretação dos Coeficientes:\n","- Um coeficiente positivo significa que aumentar o valor dessa feature está associado a uma maior probabilidade de churn.\n","- Um coeficiente negativo significa que aumentar o valor dessa feature está associado a uma menor probabilidade de churn.\n","- A magnitude do coeficiente (ignorando o sinal) indica o quão forte é essa associação.\n","\n","Nota: Esta análise é baseada nos coeficientes de um modelo de Regressão Logística treinado. Outros modelos podem fornecer diferentes medidas de importância de feature.\n"]}]}]}