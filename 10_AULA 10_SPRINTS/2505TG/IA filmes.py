# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EylTZgQqN46QBOB_YzzcKUBKA_qp7qAs
"""

import pandas as pd
import numpy as np
import random

from sklearn.feature_extraction.text import TfidfTransformer , TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB

classificacao = []
sentimentos = []

classificacao_pos = ['maravilhoso','inclivel','adoro','recomendo','perfeito']
classificacao_neg = ['ruim','horrivel','decepcionante','n√£o recomendo','pessimo']
classificacao_neu = ['bom','legal','ok','interressante','informativo']

for _ in range(100):
  # positivo
  classificacao_pos = random.choice(classificacao_pos) + " " + random.choice(classificacao_pos)
  classificacao.append(classificacao_pos)
  sentimentos.append(2)

  # neutro
  classificacao_neu = random.choice(classificacao_neu) + " " + random.choice(classificacao_neu)
  classificacao.append(classificacao_neu)
  sentimentos.append(1)

  # negativos
  classificacao_neg = random.choice(classificacao_neg) + " " + random.choice(classificacao_neg)
  classificacao.append(classificacao_neg)
  sentimentos.append(0)

dados_classificacao = pd.DataFrame({
    'classificacao' : classificacao,
    'sentimento': sentimentos,
})

dados_classificacao.to_csv('dados_classificacao.csv', index=False)

dados_classificacao = pd.read_csv('dados_classificacao.csv')

classificacao = dados_classificacao ['classificacao']
rotulos = dados_classificacao ['sentimento']

vectorizar = TfidfVectorizer ()
vectores_classificacao = vectorizar.fit_transform(classificacao)

X_treino , X_teste, y_treino, y_teste = train_test_split(vectores_classificacao, rotulos, test_size=0.2,random_state=42)

modelo_nb = MultinomialNB()
modelo_nb.fit(X_treino , y_treino)

acuracia = modelo_nb.score(X_teste , y_teste)
print('acuracia do modelo', acuracia)

classificacao_novo = 'Amei o novo produto da marca! #maravilhoso'
vector_novo = vectorizar.transform([classificacao_novo])
sentimento_predito = modelo_nb.predict(vector_novo)
print('sentimento predito para o novo filme: ', sentimento_predito[0])