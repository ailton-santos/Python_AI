# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KDYYx0btr4D8GMGgRYvUK-g6J6LhG21U
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

df = pd.read_csv("alunos_desempenho.csv")
print(df.head())

print(df.info())
print(df.describe())
print(df['passou'].value_counts())  # Ver quantos foram aprovados/reprovados

# Correlação entre variáveis
plt.figure(figsize=(10,6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Matriz de Correlação")
plt.show()

# Frequência vs Passou
sns.boxplot(x='passou', y='frequencia', data=df)
plt.title("Frequência x Resultado")
plt.show()

# Participação vs Passou
sns.boxplot(x='passou', y='participacao', data=df)
plt.title("Participação x Resultado")
plt.show()

# Selecionar as colunas que serão usadas para prever
X = df[['idade', 'frequencia', 'nota_prova1', 'nota_prova2', 'trabalhos', 'participacao']]
y = df['passou']

# Dividir os dados em treino e teste (80% treino, 20% teste)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

modelo = RandomForestClassifier(n_estimators=100, random_state=42)
modelo.fit(X_train, y_train)
y_pred = modelo.predict(X_test)

print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

importances = modelo.feature_importances_
feature_names = X.columns

# Criar DataFrame com importâncias
importancia_df = pd.DataFrame({'Variável': feature_names, 'Importância': importances})
importancia_df = importancia_df.sort_values(by='Importância', ascending=False)

# Plotar gráfico
sns.barplot(x='Importância', y='Variável', data=importancia_df)
plt.title("Importância das Variáveis para o Resultado Final")
plt.show()

