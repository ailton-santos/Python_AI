# -*- coding: utf-8 -*-
"""identificarsorriso.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16dBWMuj05Dfy5TzEu-C1KmNRYdnj_wlB
"""

import cv2

# Carregar o classificador em cascata de Haar para detecção de rostos e sorrisos
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
smile_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_smile.xml')

# Iniciar a captura de vídeo
cap = cv2.VideoCapture(0)

while True:
    # Capturar frame por frame
    ret, frame = cap.read()

    if not ret:
        break

    # Converter o frame para escala de cinza
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detectar rostos no frame
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5, minSize=(30, 30))

    for (x, y, w, h) in faces:
        # Desenhar um retângulo ao redor do rosto
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)

        # Região de interesse para detecção do sorriso
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = frame[y:y+h, x:x+w]

        # Detectar sorrisos dentro da região do rosto
        smiles = smile_cascade.detectMultiScale(roi_gray, scaleFactor=1.8, minNeighbors=20, minSize=(25, 25))

        for (sx, sy, sw, sh) in smiles:
            # Desenhar um retângulo ao redor do sorriso
            cv2.rectangle(roi_color, (sx, sy), (sx+sw, sy+sh), (0, 255, 0), 2)

        # Exibir mensagem de sorriso
        if len(smiles) > 0:
            cv2.putText(frame, 'Sorrindo :)', (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)
        else:
            cv2.putText(frame, 'Nao Sorrindo', (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 255), 2)

    # Mostrar o frame resultante
    cv2.imshow('Video', frame)

    # Sair do loop com a tecla 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Liberar a captura e destruir todas as janelas
cap.release()
cv2.destroyAllWindows()